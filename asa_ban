#!/usr/bin/python3

import os, sys
from getpass import getpass
import paramiko
from paramikoe import SSHClientInteraction
import argparse
from configparser import ConfigParser


# what are we doing
parser = argparse.ArgumentParser(
	description="ban script")
parser.add_argument("input_file", help="file to use for ban action")
parser.add_argument("-s", "--server", help="server name to connect to from the config file", dest="server")
parser.add_argument('-c', help="config file", dest="config_file")
parser.add_argument('-v', help="verbose", dest="verbose", action="store_true")
parser.add_argument('--debug', help="debug", dest="debug", action="store_true")
args = parser.parse_args()


# evaluate verbosity levels
verbose = False
debug = False
if args.verbose:
	verbose = True
if args.debug:
	debug = True
	verbose = True

# read in from a config if available
config = ConfigParser()
if args.config_file:
	try:
		config.read(args.config_file)
		if debug: print("using config file from command line")
	except:
		parser.error("invalid config file %s" %(args.config_file))
		sys.exit()
else: # no file given to us, try to read from a default file
	try:
		config.read('autoban.conf')
		if debug: print("falling back to 'autoban.conf'")
	except:
		parser.error("could not read autoban.conf")
		sys.exit()


# determine which server we're going to use from the config file
if args.server:
	if not args.server in config:
		parser.error("specified server \"%s\" was not found in config file" %(args.server))
		sys.exit()
	else:
		server = args.server
else: # if none was given to us, fall back to a default
	if not 'defaultserver' in config['DEFAULT']:
		parser.error("no server specified in DEFAULT section of config file")
		sys.exit()
	else:
		server = config['DEFAULT']['defaultserver']

	if not server in config:
		parser.error("invalid configuration section %s" %(server))
		sys.exit()


# extract required values from config file
asa_address = config[server]['address']
asa_username = config[server]['username']
asa_password = config[server]['password']
asa_port = int(config[server]['port'])
asa_timeout = int(config[server]['timeout'])

# extract optional values from config file
use_ssh_key = config[server]["use_ssh_key"]
ssh_known_hosts = config[server]["ssh_known_hosts"]

# special handling for debug/verbose from config file
if config[server]["debug"] == "true":
	debug = True
if config[server]["verbose"] == "True":
	verbose = True


if verbose:
	print("asa_address %s" %(asa_address))
	print("asa_username %s" %(asa_username))
	print("asa_port %s" %(asa_port))
	print("asa_timeout %s" %(asa_timeout))
	print("input_file %s" %(args.input_file))


#asa_password = getpass()
#asa_timeout = 15
asaprompt = ".*# "
#ssh_known_hosts = "~/.ssh/known_hosts"
#debug=False



# additional initialization
ssh_known_hosts = os.path.expanduser(ssh_known_hosts)
#if not asa_username:
#	asa_username = 'REDACTED'
enable_password = asa_password
if debug:
	paramiko.common.logging.basicConfig(level=paramiko.common.DEBUG)

# figure out what we're banning
try:
	ip = sys.argv[1]
except:
	ip = input("what IP would you like to ban? ")

# create child process
client=paramiko.SSHClient()
#child = pexpect.spawn('ssh -M -p %d %s@%s' %(port, username, hostname))
client.load_host_keys(ssh_known_hosts)
client.connect(asa_address, port=asa_port, username=asa_username, password=asa_password, timeout=asa_timeout, look_for_keys=False)
interact=SSHClientInteraction(client, timeout=asa_timeout, display=debug)

#log in and set some environment stuff
interact.expect(".*>.*")
interact.send("en")
interact.expect(".*Password:.*")
interact.send(enable_password)
interact.expect(asaprompt)
interact.send("configure terminal")
interact.expect(asaprompt)
interact.send("terminal pager 0")
interact.expect(asaprompt)
interact.send("terminal width 200")
interact.expect(asaprompt)

# ban
interact.send("object-group network blacklisted_IPs")
interact.expect(asaprompt)
interact.send("network-object host " + ip)
interact.expect(asaprompt)

# close connection
client.close()
